Clase

package DiagramaDeClases;

import java.io.Serializable;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

/**
 *
 * @author matia
 */
@Entity
@Table(name="propiedad")
public class Propiedad implements Serializable {
    
    @Id
    @Column(name="codigos")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int codigo;
    @Column(name="direccion")
    private String Direccion;
    @Column(name="numerodepisos")
    private String numerodepiso;
    @Column(name="nombres")
    private String nombre;
    @Column(name="estados")
    private String Estado;
    @Column(name="Disponible")
    private String Disponible;
    @Column(name="Metro_Cuadrado_Propio")
    private double metroCuadradoPropio;
    @Column(name ="Metro_Cuadrado_Comun")
    private double metroCuadradoComun;
    
    
    
    @ManyToOne
    @JoinColumn(name="Id_cliente")
    private Cliente clientes;
    
    

    @OneToMany(mappedBy = "propiedad")
    private List<Alquiler>alquiler;
    
    @OneToOne
    @JoinColumn(name="Id_Ventas")
    private Venta  ventas;
    
    
    @ManyToOne
    @JoinColumn(name="Id_Propiedad")
    private Anuncio anuncios;

    
    @OneToOne
    @JoinColumn(name = "tasacion_fk")
    private Tasacion tasacion;
    
  
    @ManyToOne
    @JoinColumn(name="propiedades")
    private TipoPropiedad tipropiedad;
    
    @OneToMany(mappedBy = "propiedades")
    private List<PagoExpensa>pagoexpensa;
    
    @ManyToOne
    @JoinColumn(name="ciudad")
    private Ciudad ciudades;
    
    @ManyToOne
    @JoinColumn(name = "propiedades_DeEdificio")
    private Edificio edificios;
    public Propiedad() {
    }

   

    
    
    
    public Propiedad(String Direccion, String numerodepiso, String nombre, String Estado, double metroCuadradoPropio, double metroCuadradoComun, Cliente clientes, TipoPropiedad tipropiedad, Edificio edificios) {
        this.Direccion = Direccion;
        this.numerodepiso = numerodepiso;
        this.nombre = nombre;
        this.Estado = Estado;
        this.metroCuadradoPropio = metroCuadradoPropio;
        this.metroCuadradoComun = metroCuadradoComun;
        this.clientes = clientes;
        this.tipropiedad = tipropiedad;
        this.edificios = edificios;
    }
   
  

   

 
    
    



   

    public int getCodigo() {
        return codigo;
    }

    public void setCodigo(int codigo) {
        this.codigo = codigo;
    }

    public String getDireccion() {
        return Direccion;
    }

    public void setDireccion(String Direccion) {
        this.Direccion = Direccion;
    }

    public String getNumerodepiso() {
        return numerodepiso;
    }

    public void setNumerodepiso(String numerodepiso) {
        this.numerodepiso = numerodepiso;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getEstado() {
        return Estado;
    }

    public void setEstado(String Estado) {
        this.Estado = Estado;
    }

    public String getDisponible() {
        return Disponible;
    }

    public void setDisponible(String Disponible) {
        this.Disponible = Disponible;
    }

    public double getMetroCuadradoPropio() {
        return metroCuadradoPropio;
    }

    public void setMetroCuadradoPropio(double metroCuadradoPropio) {
        this.metroCuadradoPropio = metroCuadradoPropio;
    }

    public double getMetroCuadradoComun() {
        return metroCuadradoComun;
    }

    public void setMetroCuadradoComun(double metroCuadradoComun) {
        this.metroCuadradoComun = metroCuadradoComun;
    }

    public Cliente getClientes() {
        return clientes;
    }

    public void setClientes(Cliente clientes) {
        this.clientes = clientes;
    }

    public List<Alquiler> getAlquiler() {
        return alquiler;
    }

    public void setAlquiler(List<Alquiler> alquiler) {
        this.alquiler = alquiler;
    }

    public Venta getVentas() {
        return ventas;
    }

    public void setVentas(Venta ventas) {
        this.ventas = ventas;
    }

    public Anuncio getAnuncios() {
        return anuncios;
    }

    public void setAnuncios(Anuncio anuncios) {
        this.anuncios = anuncios;
    }

    public Tasacion getTasacion() {
        return tasacion;
    }

    public void setTasacion(Tasacion tasacion) {
        this.tasacion = tasacion;
    }

    public TipoPropiedad getTipropiedad() {
        return tipropiedad;
    }

    public void setTipropiedad(TipoPropiedad tipropiedad) {
        this.tipropiedad = tipropiedad;
    }

    public List<PagoExpensa> getPagoexpensa() {
        return pagoexpensa;
    }

    public void setPagoexpensa(List<PagoExpensa> pagoexpensa) {
        this.pagoexpensa = pagoexpensa;
    }

    public Ciudad getCiudades() {
        return ciudades;
    }

    public void setCiudades(Ciudad ciudades) {
        this.ciudades = ciudades;
    }

    public Edificio getEdificios() {
        return edificios;
    }

    public void setEdificios(Edificio edificios) {
        this.edificios = edificios;
    }

    
 
    
    
 
    
    
    

   
}

controladora principal


package ControladoraGeneral;
    import persistencia.ControladoraPersistencia;
    import ControladoraGeneral.ControladoraLogin;
    import Vista.GestionTasacion;
import Vista.Login;

/**
 *
 * @author matia
 */
public class ControladoraGneral {
    
    private  ControladoraLogin controladoralogin;
    private ControladoraCliente controladoracliente;
    private ContraladoraTasacion ContraladoraTasacione;
     private ControladoraPropiedad ContraladoraPropiedad;
     private ControladoraServicio ContraladoraServicio;
     private ControladoraEdificio ControladoraEdificios;
    public ControladoraGneral(){
       
        this.controladoralogin = new ControladoraLogin();
        this.controladoracliente= new ControladoraCliente();
        this.ContraladoraTasacione = new ContraladoraTasacion();
        this.ContraladoraPropiedad = new ControladoraPropiedad();
        this.ContraladoraServicio= new ControladoraServicio();
        this.ControladoraEdificios= new ControladoraEdificio();
    }

    public ControladoraLogin getControladoralogin() {
        return controladoralogin;
    }

    public ControladoraCliente getControladoracliente() {
        return controladoracliente;
    }

    public ContraladoraTasacion getContraladoraTasacione() {
        return ContraladoraTasacione;
    }

    public ControladoraPropiedad getContraladoraPropiedad() {
        return ContraladoraPropiedad;
    }

    public ControladoraServicio getContraladoraServicio() {
        return ContraladoraServicio;
    }

    public ControladoraEdificio getControladoraEdificios() {
        return ControladoraEdificios;
    }   
}         


Comienza la controladora 

package ControladoraGeneral;

import DiagramaDeClases.Cliente;
import DiagramaDeClases.Edificio;
import DiagramaDeClases.Empleado;
import DiagramaDeClases.Propiedad;
import DiagramaDeClases.Tasacion;
import DiagramaDeClases.TipoPropiedad;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import persistencia.ControladoraPersistencia;

import persistencia.TipoPropiedadJpaController;
import persistencia.PropiedadJpaController;
import persistencia.exceptions.NonexistentEntityException;
/**
 *
 * @author matia
 */
public class ControladoraPropiedad extends ControladoraPersistencia {
     private TipoPropiedadJpaController jpatipopropiedad;
     private PropiedadJpaController jpapropiedad;
   
     public ControladoraPropiedad() {
         this.jpapropiedad= new PropiedadJpaController(getEmf());
         this.jpatipopropiedad = new TipoPropiedadJpaController(getEmf());
     }
     
     
     
       public List<Propiedad> getpropiedad(){
            return this.jpapropiedad.findPropiedadEntities();
        }
     public List<TipoPropiedad> gettipopropiedad() {

        return this.jpatipopropiedad.findTipoPropiedadEntities();
        
    }
     
       public TipoPropiedad buscarPorNombretipo(String nombre) throws Exception{
         return this.jpatipopropiedad.buscarPorNombretipo(nombre);
     
        }
       
        public Propiedad buscarPorNombrepropiedad(String nombre) throws Exception{
         return this.jpapropiedad.buscarPorNombrepropiedad(nombre);
     
        }
    
        public void crearpro(String direccion , String numeropiso, String nombre, String estado,double propio,double metro,Cliente cli,TipoPropiedad propi,Edificio edi){
        
           Propiedad pro = new Propiedad(direccion, numeropiso, nombre, estado, propio, metro, cli, propi, edi);
           this.jpapropiedad.create(pro);
           
        }
        
        
        
            
            
            
        

     
        public void creartipo(String tipo) throws Exception{
        
         if(this.buscarPorNombretipo(tipo)!=null){
         throw new Exception("El Tipo de propiedad:"+ tipo+"Ya fue agregada");
         }
         
         TipoPropiedad tip = new TipoPropiedad(tipo);
         this.jpatipopropiedad.create(tip);
     
         }
     
      public  TipoPropiedad traertipo(int id){
        return this.jpatipopropiedad.findTipoPropiedad(id);
    }
    
      
    public void borrartipo(int codigo) throws NonexistentEntityException {
        this.jpatipopropiedad.destroy(codigo);
    }
    
    
}


jpa


package persistencia;

import java.io.Serializable;
import javax.persistence.Query;
import javax.persistence.EntityNotFoundException;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import DiagramaDeClases.Cliente;
import DiagramaDeClases.Venta;
import DiagramaDeClases.Anuncio;
import DiagramaDeClases.Tasacion;
import DiagramaDeClases.TipoPropiedad;
import DiagramaDeClases.Ciudad;
import DiagramaDeClases.Edificio;
import DiagramaDeClases.Alquiler;
import java.util.ArrayList;
import java.util.List;
import DiagramaDeClases.PagoExpensa;
import DiagramaDeClases.Propiedad;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import persistencia.exceptions.NonexistentEntityException;

/**
 *
 * @author matia
 */
public class PropiedadJpaController implements Serializable {

    public PropiedadJpaController(EntityManagerFactory emf) {
        this.emf = emf;
    }
    private EntityManagerFactory emf = null;

    public EntityManager getEntityManager() {
        return emf.createEntityManager();
    }

    public void create(Propiedad propiedad) {
        if (propiedad.getAlquiler() == null) {
            propiedad.setAlquiler(new ArrayList<Alquiler>());
        }
        if (propiedad.getPagoexpensa() == null) {
            propiedad.setPagoexpensa(new ArrayList<PagoExpensa>());
        }
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            Cliente clientes = propiedad.getClientes();
            if (clientes != null) {
                clientes = em.getReference(clientes.getClass(), clientes.getCodigo());
                propiedad.setClientes(clientes);
            }
            Venta ventas = propiedad.getVentas();
            if (ventas != null) {
                ventas = em.getReference(ventas.getClass(), ventas.getCodigo());
                propiedad.setVentas(ventas);
            }
            Anuncio anuncios = propiedad.getAnuncios();
            if (anuncios != null) {
                anuncios = em.getReference(anuncios.getClass(), anuncios.getCodigo());
                propiedad.setAnuncios(anuncios);
            }
            Tasacion tasacion = propiedad.getTasacion();
            if (tasacion != null) {
                tasacion = em.getReference(tasacion.getClass(), tasacion.getCodigo());
                propiedad.setTasacion(tasacion);
            }
            TipoPropiedad tipropiedad = propiedad.getTipropiedad();
            if (tipropiedad != null) {
                tipropiedad = em.getReference(tipropiedad.getClass(), tipropiedad.getCodigo());
                propiedad.setTipropiedad(tipropiedad);
            }
            Ciudad ciudades = propiedad.getCiudades();
            if (ciudades != null) {
                ciudades = em.getReference(ciudades.getClass(), ciudades.getCodigo());
                propiedad.setCiudades(ciudades);
            }
            Edificio edificios = propiedad.getEdificios();
            if (edificios != null) {
                edificios = em.getReference(edificios.getClass(), edificios.getCodigo());
                propiedad.setEdificios(edificios);
            }
            List<Alquiler> attachedAlquiler = new ArrayList<Alquiler>();
            for (Alquiler alquilerAlquilerToAttach : propiedad.getAlquiler()) {
                alquilerAlquilerToAttach = em.getReference(alquilerAlquilerToAttach.getClass(), alquilerAlquilerToAttach.getCodigo());
                attachedAlquiler.add(alquilerAlquilerToAttach);
            }
            propiedad.setAlquiler(attachedAlquiler);
            List<PagoExpensa> attachedPagoexpensa = new ArrayList<PagoExpensa>();
            for (PagoExpensa pagoexpensaPagoExpensaToAttach : propiedad.getPagoexpensa()) {
                pagoexpensaPagoExpensaToAttach = em.getReference(pagoexpensaPagoExpensaToAttach.getClass(), pagoexpensaPagoExpensaToAttach.getCodigo());
                attachedPagoexpensa.add(pagoexpensaPagoExpensaToAttach);
            }
            propiedad.setPagoexpensa(attachedPagoexpensa);
            em.persist(propiedad);
            if (clientes != null) {
                clientes.getPropiedades().add(propiedad);
                clientes = em.merge(clientes);
            }
            if (ventas != null) {
                Propiedad oldPropiedadesOfVentas = ventas.getPropiedades();
                if (oldPropiedadesOfVentas != null) {
                    oldPropiedadesOfVentas.setVentas(null);
                    oldPropiedadesOfVentas = em.merge(oldPropiedadesOfVentas);
                }
                ventas.setPropiedades(propiedad);
                ventas = em.merge(ventas);
            }
            if (anuncios != null) {
                anuncios.getPropiedades().add(propiedad);
                anuncios = em.merge(anuncios);
            }
            if (tasacion != null) {
                Propiedad oldPropiedadesOfTasacion = tasacion.getPropiedades();
                if (oldPropiedadesOfTasacion != null) {
                    oldPropiedadesOfTasacion.setTasacion(null);
                    oldPropiedadesOfTasacion = em.merge(oldPropiedadesOfTasacion);
                }
                tasacion.setPropiedades(propiedad);
                tasacion = em.merge(tasacion);
            }
            if (tipropiedad != null) {
                tipropiedad.getPropiedades().add(propiedad);
                tipropiedad = em.merge(tipropiedad);
            }
            if (ciudades != null) {
                ciudades.getPropiedades().add(propiedad);
                ciudades = em.merge(ciudades);
            }
            if (edificios != null) {
                edificios.getPropiedades().add(propiedad);
                edificios = em.merge(edificios);
            }
            for (Alquiler alquilerAlquiler : propiedad.getAlquiler()) {
                Propiedad oldPropiedadOfAlquilerAlquiler = alquilerAlquiler.getPropiedad();
                alquilerAlquiler.setPropiedad(propiedad);
                alquilerAlquiler = em.merge(alquilerAlquiler);
                if (oldPropiedadOfAlquilerAlquiler != null) {
                    oldPropiedadOfAlquilerAlquiler.getAlquiler().remove(alquilerAlquiler);
                    oldPropiedadOfAlquilerAlquiler = em.merge(oldPropiedadOfAlquilerAlquiler);
                }
            }
            for (PagoExpensa pagoexpensaPagoExpensa : propiedad.getPagoexpensa()) {
                Propiedad oldPropiedadesOfPagoexpensaPagoExpensa = pagoexpensaPagoExpensa.getPropiedades();
                pagoexpensaPagoExpensa.setPropiedades(propiedad);
                pagoexpensaPagoExpensa = em.merge(pagoexpensaPagoExpensa);
                if (oldPropiedadesOfPagoexpensaPagoExpensa != null) {
                    oldPropiedadesOfPagoexpensaPagoExpensa.getPagoexpensa().remove(pagoexpensaPagoExpensa);
                    oldPropiedadesOfPagoexpensaPagoExpensa = em.merge(oldPropiedadesOfPagoexpensaPagoExpensa);
                }
            }
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void edit(Propiedad propiedad) throws NonexistentEntityException, Exception {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            Propiedad persistentPropiedad = em.find(Propiedad.class, propiedad.getCodigo());
            Cliente clientesOld = persistentPropiedad.getClientes();
            Cliente clientesNew = propiedad.getClientes();
            Venta ventasOld = persistentPropiedad.getVentas();
            Venta ventasNew = propiedad.getVentas();
            Anuncio anunciosOld = persistentPropiedad.getAnuncios();
            Anuncio anunciosNew = propiedad.getAnuncios();
            Tasacion tasacionOld = persistentPropiedad.getTasacion();
            Tasacion tasacionNew = propiedad.getTasacion();
            TipoPropiedad tipropiedadOld = persistentPropiedad.getTipropiedad();
            TipoPropiedad tipropiedadNew = propiedad.getTipropiedad();
            Ciudad ciudadesOld = persistentPropiedad.getCiudades();
            Ciudad ciudadesNew = propiedad.getCiudades();
            Edificio edificiosOld = persistentPropiedad.getEdificios();
            Edificio edificiosNew = propiedad.getEdificios();
            List<Alquiler> alquilerOld = persistentPropiedad.getAlquiler();
            List<Alquiler> alquilerNew = propiedad.getAlquiler();
            List<PagoExpensa> pagoexpensaOld = persistentPropiedad.getPagoexpensa();
            List<PagoExpensa> pagoexpensaNew = propiedad.getPagoexpensa();
            if (clientesNew != null) {
                clientesNew = em.getReference(clientesNew.getClass(), clientesNew.getCodigo());
                propiedad.setClientes(clientesNew);
            }
            if (ventasNew != null) {
                ventasNew = em.getReference(ventasNew.getClass(), ventasNew.getCodigo());
                propiedad.setVentas(ventasNew);
            }
            if (anunciosNew != null) {
                anunciosNew = em.getReference(anunciosNew.getClass(), anunciosNew.getCodigo());
                propiedad.setAnuncios(anunciosNew);
            }
            if (tasacionNew != null) {
                tasacionNew = em.getReference(tasacionNew.getClass(), tasacionNew.getCodigo());
                propiedad.setTasacion(tasacionNew);
            }
            if (tipropiedadNew != null) {
                tipropiedadNew = em.getReference(tipropiedadNew.getClass(), tipropiedadNew.getCodigo());
                propiedad.setTipropiedad(tipropiedadNew);
            }
            if (ciudadesNew != null) {
                ciudadesNew = em.getReference(ciudadesNew.getClass(), ciudadesNew.getCodigo());
                propiedad.setCiudades(ciudadesNew);
            }
            if (edificiosNew != null) {
                edificiosNew = em.getReference(edificiosNew.getClass(), edificiosNew.getCodigo());
                propiedad.setEdificios(edificiosNew);
            }
            List<Alquiler> attachedAlquilerNew = new ArrayList<Alquiler>();
            for (Alquiler alquilerNewAlquilerToAttach : alquilerNew) {
                alquilerNewAlquilerToAttach = em.getReference(alquilerNewAlquilerToAttach.getClass(), alquilerNewAlquilerToAttach.getCodigo());
                attachedAlquilerNew.add(alquilerNewAlquilerToAttach);
            }
            alquilerNew = attachedAlquilerNew;
            propiedad.setAlquiler(alquilerNew);
            List<PagoExpensa> attachedPagoexpensaNew = new ArrayList<PagoExpensa>();
            for (PagoExpensa pagoexpensaNewPagoExpensaToAttach : pagoexpensaNew) {
                pagoexpensaNewPagoExpensaToAttach = em.getReference(pagoexpensaNewPagoExpensaToAttach.getClass(), pagoexpensaNewPagoExpensaToAttach.getCodigo());
                attachedPagoexpensaNew.add(pagoexpensaNewPagoExpensaToAttach);
            }
            pagoexpensaNew = attachedPagoexpensaNew;
            propiedad.setPagoexpensa(pagoexpensaNew);
            propiedad = em.merge(propiedad);
            if (clientesOld != null && !clientesOld.equals(clientesNew)) {
                clientesOld.getPropiedades().remove(propiedad);
                clientesOld = em.merge(clientesOld);
            }
            if (clientesNew != null && !clientesNew.equals(clientesOld)) {
                clientesNew.getPropiedades().add(propiedad);
                clientesNew = em.merge(clientesNew);
            }
            if (ventasOld != null && !ventasOld.equals(ventasNew)) {
                ventasOld.setPropiedades(null);
                ventasOld = em.merge(ventasOld);
            }
            if (ventasNew != null && !ventasNew.equals(ventasOld)) {
                Propiedad oldPropiedadesOfVentas = ventasNew.getPropiedades();
                if (oldPropiedadesOfVentas != null) {
                    oldPropiedadesOfVentas.setVentas(null);
                    oldPropiedadesOfVentas = em.merge(oldPropiedadesOfVentas);
                }
                ventasNew.setPropiedades(propiedad);
                ventasNew = em.merge(ventasNew);
            }
            if (anunciosOld != null && !anunciosOld.equals(anunciosNew)) {
                anunciosOld.getPropiedades().remove(propiedad);
                anunciosOld = em.merge(anunciosOld);
            }
            if (anunciosNew != null && !anunciosNew.equals(anunciosOld)) {
                anunciosNew.getPropiedades().add(propiedad);
                anunciosNew = em.merge(anunciosNew);
            }
            if (tasacionOld != null && !tasacionOld.equals(tasacionNew)) {
                tasacionOld.setPropiedades(null);
                tasacionOld = em.merge(tasacionOld);
            }
            if (tasacionNew != null && !tasacionNew.equals(tasacionOld)) {
                Propiedad oldPropiedadesOfTasacion = tasacionNew.getPropiedades();
                if (oldPropiedadesOfTasacion != null) {
                    oldPropiedadesOfTasacion.setTasacion(null);
                    oldPropiedadesOfTasacion = em.merge(oldPropiedadesOfTasacion);
                }
                tasacionNew.setPropiedades(propiedad);
                tasacionNew = em.merge(tasacionNew);
            }
            if (tipropiedadOld != null && !tipropiedadOld.equals(tipropiedadNew)) {
                tipropiedadOld.getPropiedades().remove(propiedad);
                tipropiedadOld = em.merge(tipropiedadOld);
            }
            if (tipropiedadNew != null && !tipropiedadNew.equals(tipropiedadOld)) {
                tipropiedadNew.getPropiedades().add(propiedad);
                tipropiedadNew = em.merge(tipropiedadNew);
            }
            if (ciudadesOld != null && !ciudadesOld.equals(ciudadesNew)) {
                ciudadesOld.getPropiedades().remove(propiedad);
                ciudadesOld = em.merge(ciudadesOld);
            }
            if (ciudadesNew != null && !ciudadesNew.equals(ciudadesOld)) {
                ciudadesNew.getPropiedades().add(propiedad);
                ciudadesNew = em.merge(ciudadesNew);
            }
            if (edificiosOld != null && !edificiosOld.equals(edificiosNew)) {
                edificiosOld.getPropiedades().remove(propiedad);
                edificiosOld = em.merge(edificiosOld);
            }
            if (edificiosNew != null && !edificiosNew.equals(edificiosOld)) {
                edificiosNew.getPropiedades().add(propiedad);
                edificiosNew = em.merge(edificiosNew);
            }
            for (Alquiler alquilerOldAlquiler : alquilerOld) {
                if (!alquilerNew.contains(alquilerOldAlquiler)) {
                    alquilerOldAlquiler.setPropiedad(null);
                    alquilerOldAlquiler = em.merge(alquilerOldAlquiler);
                }
            }
            for (Alquiler alquilerNewAlquiler : alquilerNew) {
                if (!alquilerOld.contains(alquilerNewAlquiler)) {
                    Propiedad oldPropiedadOfAlquilerNewAlquiler = alquilerNewAlquiler.getPropiedad();
                    alquilerNewAlquiler.setPropiedad(propiedad);
                    alquilerNewAlquiler = em.merge(alquilerNewAlquiler);
                    if (oldPropiedadOfAlquilerNewAlquiler != null && !oldPropiedadOfAlquilerNewAlquiler.equals(propiedad)) {
                        oldPropiedadOfAlquilerNewAlquiler.getAlquiler().remove(alquilerNewAlquiler);
                        oldPropiedadOfAlquilerNewAlquiler = em.merge(oldPropiedadOfAlquilerNewAlquiler);
                    }
                }
            }
            for (PagoExpensa pagoexpensaOldPagoExpensa : pagoexpensaOld) {
                if (!pagoexpensaNew.contains(pagoexpensaOldPagoExpensa)) {
                    pagoexpensaOldPagoExpensa.setPropiedades(null);
                    pagoexpensaOldPagoExpensa = em.merge(pagoexpensaOldPagoExpensa);
                }
            }
            for (PagoExpensa pagoexpensaNewPagoExpensa : pagoexpensaNew) {
                if (!pagoexpensaOld.contains(pagoexpensaNewPagoExpensa)) {
                    Propiedad oldPropiedadesOfPagoexpensaNewPagoExpensa = pagoexpensaNewPagoExpensa.getPropiedades();
                    pagoexpensaNewPagoExpensa.setPropiedades(propiedad);
                    pagoexpensaNewPagoExpensa = em.merge(pagoexpensaNewPagoExpensa);
                    if (oldPropiedadesOfPagoexpensaNewPagoExpensa != null && !oldPropiedadesOfPagoexpensaNewPagoExpensa.equals(propiedad)) {
                        oldPropiedadesOfPagoexpensaNewPagoExpensa.getPagoexpensa().remove(pagoexpensaNewPagoExpensa);
                        oldPropiedadesOfPagoexpensaNewPagoExpensa = em.merge(oldPropiedadesOfPagoexpensaNewPagoExpensa);
                    }
                }
            }
            em.getTransaction().commit();
        } catch (Exception ex) {
            String msg = ex.getLocalizedMessage();
            if (msg == null || msg.length() == 0) {
                int id = propiedad.getCodigo();
                if (findPropiedad(id) == null) {
                    throw new NonexistentEntityException("The propiedad with id " + id + " no longer exists.");
                }
            }
            throw ex;
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void destroy(int id) throws NonexistentEntityException {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            Propiedad propiedad;
            try {
                propiedad = em.getReference(Propiedad.class, id);
                propiedad.getCodigo();
            } catch (EntityNotFoundException enfe) {
                throw new NonexistentEntityException("The propiedad with id " + id + " no longer exists.", enfe);
            }
            Cliente clientes = propiedad.getClientes();
            if (clientes != null) {
                clientes.getPropiedades().remove(propiedad);
                clientes = em.merge(clientes);
            }
            Venta ventas = propiedad.getVentas();
            if (ventas != null) {
                ventas.setPropiedades(null);
                ventas = em.merge(ventas);
            }
            Anuncio anuncios = propiedad.getAnuncios();
            if (anuncios != null) {
                anuncios.getPropiedades().remove(propiedad);
                anuncios = em.merge(anuncios);
            }
            Tasacion tasacion = propiedad.getTasacion();
            if (tasacion != null) {
                tasacion.setPropiedades(null);
                tasacion = em.merge(tasacion);
            }
            TipoPropiedad tipropiedad = propiedad.getTipropiedad();
            if (tipropiedad != null) {
                tipropiedad.getPropiedades().remove(propiedad);
                tipropiedad = em.merge(tipropiedad);
            }
            Ciudad ciudades = propiedad.getCiudades();
            if (ciudades != null) {
                ciudades.getPropiedades().remove(propiedad);
                ciudades = em.merge(ciudades);
            }
            Edificio edificios = propiedad.getEdificios();
            if (edificios != null) {
                edificios.getPropiedades().remove(propiedad);
                edificios = em.merge(edificios);
            }
            List<Alquiler> alquiler = propiedad.getAlquiler();
            for (Alquiler alquilerAlquiler : alquiler) {
                alquilerAlquiler.setPropiedad(null);
                alquilerAlquiler = em.merge(alquilerAlquiler);
            }
            List<PagoExpensa> pagoexpensa = propiedad.getPagoexpensa();
            for (PagoExpensa pagoexpensaPagoExpensa : pagoexpensa) {
                pagoexpensaPagoExpensa.setPropiedades(null);
                pagoexpensaPagoExpensa = em.merge(pagoexpensaPagoExpensa);
            }
            em.remove(propiedad);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public List<Propiedad> findPropiedadEntities() {
        return findPropiedadEntities(true, -1, -1);
    }

    public List<Propiedad> findPropiedadEntities(int maxResults, int firstResult) {
        return findPropiedadEntities(false, maxResults, firstResult);
    }

    private List<Propiedad> findPropiedadEntities(boolean all, int maxResults, int firstResult) {
        EntityManager em = getEntityManager();
        try {
            CriteriaQuery cq = em.getCriteriaBuilder().createQuery();
            cq.select(cq.from(Propiedad.class));
            Query q = em.createQuery(cq);
            if (!all) {
                q.setMaxResults(maxResults);
                q.setFirstResult(firstResult);
            }
            return q.getResultList();
        } finally {
            em.close();
        }
    }

    public Propiedad findPropiedad(int id) {
        EntityManager em = getEntityManager();
        try {
            return em.find(Propiedad.class, id);
        } finally {
            em.close();
        }
    }

    public int getPropiedadCount() {
        EntityManager em = getEntityManager();
        try {
            CriteriaQuery cq = em.getCriteriaBuilder().createQuery();
            Root<Propiedad> rt = cq.from(Propiedad.class);
            cq.select(em.getCriteriaBuilder().count(rt));
            Query q = em.createQuery(cq);
            return ((Long) q.getSingleResult()).intValue();
        } finally {
            em.close();
        }
    }
    public Propiedad buscarPorNombrepropiedad(String nombre) throws Exception {
       Propiedad nomb = null;

        String jpql = "SELECT Object (p) FROM Propiedad p WHERE p.nombre = '" + nombre + "'";
        try {
            Query query = getEntityManager().createQuery(jpql);
            nomb = (Propiedad) query.getSingleResult();
        } catch (Exception e) {
            return null;
        }
        return nomb;
    }
}



boton donde surge el problema

 private void bntagregarpropiedadActionPerformed(java.awt.event.ActionEvent evt) {                                                    

     
         btnborrarpropiedad.setEnabled(false);

         
           try {
                  if ( txtnombrePropiedads.equals("") || txtnumerodepiso.equals("") || txtnombrePropiedads.equals("") ) {
                
                        JOptionPane.showMessageDialog(null,"Todos los campo son requerido");
                
                    }else{
                        String nombre = txtnombrePropiedads.getText();
                        String numeropiso = txtnumerodepiso.getText();
                        String direccion = txtnombrePropiedads.getText();
                        
                        

                        if (cbotipropiedad.getSelectedItem() == null || cbotipoedificios.getSelectedItem() == null || departamentoCliente.getSelectedItem() == null || jcomboxestado.getSelectedItem() == null) {
                            JOptionPane.showMessageDialog(null, "Seleccione Solo un Tipo De propiedad o edificio o cliente , estado", "Advertencia", 1);
                        }else{
                             String estado = (String) jcomboxestado.getSelectedItem();
                             TipoPropiedad prop = (TipoPropiedad)cbotipropiedad.getSelectedItem();
                             Edificio edi =  (Edificio)cbotipoedificios.getSelectedItem();
                             Cliente cli =  (Cliente)departamentoCliente.getSelectedItem();
                             double metro = Double.parseDouble(txtmetrocuadradocomun.getText());
                             double propio = Double.parseDouble(txtmetrocuadradopropio.getText());
                           
                             if (metro > 0 && propio > 0) {
                                JOptionPane.showMessageDialog(null,"Llego");
                   
                                this.control.getContraladoraPropiedad().crearpro(direccion, numeropiso, nombre, estado, propio, metro, cli, prop, edi);
            
                             }
                            
                        }
                      
                    }
         } catch (Exception e) {
        
                e.printStackTrace();
        
        }


Error que me lanza




java.lang.NullPointerException
	at Vista.GestionPropiedad.bntagregarpropiedadActionPerformed(GestionPropiedad.java:539)
	at Vista.GestionPropiedad.access$1100(GestionPropiedad.java:38)
	at Vista.GestionPropiedad$12.actionPerformed(GestionPropiedad.java:302)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2348)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.Component.processMouseEvent(Component.java:6539)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6304)
	at java.awt.Container.processEvent(Container.java:2239)
	at java.awt.Component.dispatchEventImpl(Component.java:4889)
	at java.awt.Container.dispatchEventImpl(Container.java:2297)
	at java.awt.Component.dispatchEvent(Component.java:4711)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4904)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4535)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4476)
	at java.awt.Container.dispatchEventImpl(Container.java:2283)
	at java.awt.Window.dispatchEventImpl(Window.java:2746)
	at java.awt.Component.dispatchEvent(Component.java:4711)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:760)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:74)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:84)
	at java.awt.EventQueue$4.run(EventQueue.java:733)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:74)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:730)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:205)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)


